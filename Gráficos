import numpy as np
import pandas as pd
import matplotlib.pyplot as plt


data = pd.read_csv("XP4FIS200 V1.txt", delimiter="\t", skiprows=1)

# Convertir las columnas de x, y y t a tipo float, reemplazando la coma por punto
data["t"] = data["t"].str.replace(",", ".").astype(float)
data["x"] = data["x"].str.replace(",", ".").astype(float)
data["y"] = data["y"].str.replace(",", ".").astype(float)

# Posición inicial (primer valor de x y y)
x_0 = data["x"][0]
y_0 = data["y"][0]

# Cálculo del desplazamiento r(t)
data["r(t)"] = np.sqrt((data["x"] - x_0) ** 2 + (data["y"] - y_0) ** 2)

# Calcular r^2(t)
data["r^2(t)"] = data["r(t)"] ** 2

# Calcular el desplazamiento cuadrático medio ⟨r^2(t)⟩
mean_r2 = data["r^2(t)"].mean()

# Calcular la desviación estándar de r^2(t)
std_r2 = data["r^2(t)"].std()

# Calcular el número de observaciones
N = len(data["r^2(t)"])

# Calcular el error estándar
SE = std_r2 / np.sqrt(N)

# Mostrar el desplazamiento cuadrático medio y el error estándar
print("Desplazamiento cuadrático medio ⟨r^2(t)⟩:", mean_r2)
print("Error estándar de ⟨r^2(t)⟩:", SE)


plt.figure(figsize=(10, 6))

plt.plot(
    data["t"],
    data["r^2(t)"],
    marker="o",
    linestyle="-",
    color="b",
    markersize=4,
    linewidth=3,
    label="⟨r^2(t)⟩",
)


plt.xlabel("(Tiempo ± 0,02)s", fontsize=16, labelpad=10)
plt.ylabel("(r² ± 0.000007)m²", fontsize=16, labelpad=10)
plt.xticks(fontsize=14)
plt.yticks(fontsize=14)
plt.grid(True)


plt.savefig("XP4FIS200 V2.png", dpi=300, bbox_inches="tight")  # Guardar a 300 dpi

plt.show()
